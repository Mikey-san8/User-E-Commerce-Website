@page "/products"
@rendermode InteractiveServer

@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <main class="container mx-auto flex flex-col md:flex-row gap-5 mb-12 py-4 px-6 lg:px-0">
        <aside>
            <a href="/" class="text-lg text-nowrap font-semibold">+ All Categories</a>

            @if (distinctBrands.Count > 0)
            {
                <div class="flex flex-wrap gap-4 mt-2">
                    <div class="flex flex-col gap-1 bg-white rounded-lg p-2 shadow-lg">
                        <h3 class="font-semibold text-gray-400">Brand</h3>
                        <ul>
                            @foreach (var brand in distinctBrands)
                            {
                                <li>
                                    <NavLink href="@($"/products?category={Category}&brand={brand}")"
                                             class="text-text hover:text-secondary text-nowrap">
                                        @brand
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    </div>

                    <div class="flex flex-col gap-1 bg-white rounded-lg p-2 shadow-lg">
                        <h3 class="font-semibold text-gray-400">Tags</h3>
                        <ul>
                            <li>Tech</li>
                            <li>Fashion</li>
                            <li>Gaming</li>
                            <li>Mobile</li>
                            <li>Lifestyle</li>
                        </ul>
                    </div>

                    <div class="flex flex-col gap-1 bg-white rounded-lg p-2 shadow-lg">
                        <h3 class="font-semibold text-gray-400">Shipping</h3>
                        <ul>
                            <li>J&T Express</li>
                            <li>LBC Express</li>
                            <li>eGatang Services</li>
                            <li>2Go Express</li>
                            <li>Flash Express</li>
                            <li>Ninja Van</li>
                        </ul>
                    </div>

                    <div class="flex flex-col gap-1 bg-white rounded-lg p-2 shadow-lg">
                        <h3 class="font-semibold text-gray-400">Rating</h3>
                        <ul>
                            <li>1</li>
                            <li>2</li>
                            <li>3</li>
                            <li>4</li>
                            <li>5</li>
                        </ul>
                    </div>

                </div>

            }
        </aside>

        <article>
            <h1 class="text-xl font-semibold mb-4">Product List</h1>

            <div class="flex justify-between items-center gap-4 mb-4 text-sm">
                <div class="flex items-center gap-2">
                    <label for="sortBy" class="font-medium">Sort by:</label>
                    <select @onchange="OnSortChanged" class="border py-1 rounded">
                        <option value="default">Relevance</option>
                        <option value="priceLow">Price: Low to High</option>
                        <option value="priceHigh">Price: High to Low</option>
                        <option value="rating">Rating</option>
                    </select>
                </div>

                <div class="flex justify-end items-center gap-2">
                    <button @onclick="PrevPage" disabled="@(_skip == 0)" class="px-2 py-1 text-white bg-secondary rounded shadow-md">&larr;</button>
                    <span>Page @((_skip / _limit) + 1)</span>
                    <button @onclick="NextPage" disabled="@(_skip + _limit >= _total)" class="px-2 py-1 text-white bg-secondary rounded shadow-md">&rarr;</button>
                </div>
            </div>

            <div class="min-h-screen flex-grow">
                <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-4">
                    @foreach (var product in products)
                    {
                        <div class="bg-white rounded-lg shadow p-4 border border-transparent hover:border-secondary cursor-pointer transition duration-200">

                            <img src="@product.Thumbnail" alt="@product.Title" class="w-full h-48 object-contain mb-2 rounded" />

                            <div class="flex overflow-x-auto gap-2 mb-2 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent">
                                @foreach (var image in product.Images)
                                {
                                    <img src="@image" alt="@product.Title"
                                         class="h-10 w-10 object-contain rounded flex-shrink-0 border border-gray-200 hover:border-secondary" />
                                }
                            </div>

                            <div class="flex justify-between items-center gap-4 mb-1">
                                <h2 class="text-sm font-medium truncate">@product.Title</h2>
                                <span class="text-sm text-secondary">⭐ @product.Rating/5</span>
                            </div>

                            <p class="text-gray-600 text-sm truncate mb-2">@product.Description</p>

                            <div class="flex justify-between items-center mt-2 gap-4">
                                <p class="text-lg font-bold text-green-700">₱@($"{product.Price * 56.5m:0.00}")</p>
                                <span class="text-sm text-gray-500">@product.Stock pcs.</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (TotalPages > 1)
            {
                <div class="flex justify-center items-center gap-2 mt-8">

                    <button @onclick="PrevPage" disabled="@(CurrentPage == 1)"
                            class="px-3 py-1 bg-secondary text-white text-sm rounded shadow-md">
                        Previous
                    </button>

                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        var gotoPage = i;
                        <button @onclick="@(() => GoToPage(gotoPage))"
                                class="px-3 py-1 rounded shadow-md text-sm
                                                @(gotoPage == CurrentPage ? "bg-primary text-white" : "bg-white text-secondary border")">
                            @gotoPage
                        </button>
                    }

                    <button @onclick="NextPage" disabled="@(CurrentPage == TotalPages)"
                            class="px-3 py-1 bg-secondary text-white text-sm rounded shadow-md">
                        Next
                    </button>
                </div>
            }

        </article>
    </main>
}

@code {

    /* Products */
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Category { get; set; }
    [SupplyParameterFromQuery]
    public string? Brand { get; set; }

    private List<string> distinctBrands = new();

    private List<dataProducts>? products;

    private int _limit = 24;
    private int _skip = 0;
    private int _total = 0;
    private string selectedSort = "default";

    private int CurrentPage => (_skip / _limit) + 1;
    private int TotalPages => (int)Math.Ceiling((double)_total / _limit);

    protected override async Task OnParametersSetAsync()
    {
        _skip = 0;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        string url;

        if (string.IsNullOrEmpty(Category))
        {
            url = $"products?limit={_limit}&skip={_skip}";
        }
        else
        {
            url = $"products/category/{Category}?limit={_limit}&skip={_skip}";
        }

        var response = await Http.GetFromJsonAsync<dataProductsResponse>(url)
            ?? throw new Exception("No response from server.");

        _total = response.Total;

        var filtered = response.Products;

        distinctBrands = response.Products
            .Select(p => p.Brand)
            .Where(b => !string.IsNullOrWhiteSpace(b))
            .Distinct()
            .ToList();

        if (!string.IsNullOrEmpty(Brand))
        {
            filtered = filtered
                .Where(p => string.Equals(p.Brand, Brand, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        products = selectedSort switch
        {
            "priceLow" => filtered.OrderBy(p => p.Price).ToList(),
            "priceHigh" => filtered.OrderByDescending(p => p.Price).ToList(),
            "rating" => filtered.OrderByDescending(p => p.Rating).ToList(),
            _ => filtered
        };
    }

    private async Task PrevPage()
    {
        if (_skip >= _limit)
        {
            _skip -= _limit;
            await LoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (_skip + _limit < _total)
        {
            _skip += _limit;
            await LoadProducts();
        }
    }

    private async Task GoToPage(int page)
    {
        _skip = (page - 1) * _limit;
        await LoadProducts();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "default";
        await LoadProducts();
    }
}

